diff --git a/src/Highlight.tsx b/src/Highlight.tsx
index 649abed..a00de04 100644
--- a/src/Highlight.tsx
+++ b/src/Highlight.tsx
@@ -3,39 +3,24 @@ import React, { useState,
 	useRef,
 	forwardRef,
 	useImperativeHandle } from "react";
-import patterns from "./ts/patterns.ts";
 import customEvents from "./ts/customEvents.ts";
 import { ICurorChangeDetail,
 	ITweetTextareaProps } from "./ts/types.ts";
 import "./static/editorStyles.css";
-import { ProcessKeyboardProcess,
-	InsertLineBreak,
-	InsertParagraph,
-	InsertText, 
-	FormatText} from './ts/ProcessKeyboard.ts'
+import { ProcessKeyboardProcess } from "./ts/ProcessKeyboard.ts";
 import ProcessParagraph from "./ts/ProcessParagraph.ts";
-import ProcessPaste from "./ts/ProcessPaste.ts";
 import CursorEvent from "./ts/CursorEvent.ts";
 
-const STORAGE_KEY = "highlightPattern";
-let insertLineBreak:InsertLineBreak
-let insertParagraph:InsertParagraph
-let insertText:InsertText
-var textArea:ProcessKeyboardProcess | null
 let processParagraph:ProcessParagraph
-let processPaste:ProcessPaste
-let cursorEvent:CursorEvent
-let formatText:FormatText
-
 export type HighlightHandle = {
     insertSuggestionAtCaret: (suggestion:string) => void
 }
 
 const Highlight = forwardRef<HighlightHandle, ITweetTextareaProps>((
 	{className,
-        highlightClassName = '',
         placeholder,
         cursorPosition,
+		process,
         onChangeText,
         ...htmlDivAttributes }: ITweetTextareaProps,
 	ref: React.ForwardedRef<HighlightHandle>
@@ -46,35 +31,21 @@ const Highlight = forwardRef<HighlightHandle, ITweetTextareaProps>((
 		const [repositionCursor, setRepositionCursor] = useState<boolean>(false);
 		let repeat:boolean = false
 		let repeatCount:number = 0
+		let textArea:ProcessKeyboardProcess | null
+		let cursorEvent:CursorEvent = new CursorEvent()
+		if(process) {
+			var {
+				insertLineBreak,
+				insertParagraph,
+				insertText,
+				processPaste,
+				formatText
+			} = process
+		}
 
 		useEffect(() => {
-			let pattern:RegExp | null = null;
-			function init(pattern: RegExp) {
-				insertLineBreak = new InsertLineBreak(pattern, highlightClassName)
-				insertParagraph = new InsertParagraph(pattern, highlightClassName)
-				insertText = new InsertText(pattern, highlightClassName)
-				processPaste = new ProcessPaste(pattern, highlightClassName)
-				formatText = new FormatText(pattern, highlightClassName)
-			}
 			processParagraph = new ProcessParagraph(editorRef.current)
-			cursorEvent = new CursorEvent()
-			const storedPattern = window.localStorage.getItem(STORAGE_KEY);
-			if (storedPattern && storedPattern.trim() !== "") {
-				pattern = patterns.patternFromString(storedPattern);
-			}
-			if(pattern){
-				init(pattern)
-			} else {
-				patterns
-					.initPattern()
-					.then((highlightPattern) => {
-						window.localStorage.setItem(STORAGE_KEY, highlightPattern.source);
-						init(highlightPattern)
-					})
-					.catch((err) => console.error(err));
-			}
-
-		}, []);
+		},[editorRef])
 
 		useEffect(() => {
 			const editor = editorRef.current;
@@ -121,7 +92,6 @@ const Highlight = forwardRef<HighlightHandle, ITweetTextareaProps>((
                     }
             }
             }
-            
         })
 
 		const keyDownListener = (event: React.KeyboardEvent<HTMLDivElement>) => {
@@ -148,16 +118,14 @@ const Highlight = forwardRef<HighlightHandle, ITweetTextareaProps>((
 		const beforeInputListener = (event: React.FormEvent<HTMLDivElement>) => {
 			const currentText = processParagraph.processParagraph(event);
 			setText(currentText);
-			if (!event.isDefaultPrevented()) return;
+			if (!event.isDefaultPrevented()) return
 			customEvents.dispatchTextUpdateEvent(editorRef.current, { currentText });
 		};
 
 		const pasteListener = (event: React.ClipboardEvent<HTMLDivElement>) => {
 			const currentText = processPaste.textareaPasteListener(event, editorRef.current);
 			setText(currentText);
-			if (!event.isDefaultPrevented()) {
-				return;
-			}
+			if (!event.isDefaultPrevented()) return
 			customEvents.dispatchTextUpdateEvent(editorRef.current, { currentText });
 		};
 
@@ -166,7 +134,9 @@ const Highlight = forwardRef<HighlightHandle, ITweetTextareaProps>((
 			const range = document.getSelection()?.getRangeAt(0);
 			const editor = editorRef.current
 			if (!range) return;
-			if (inputType === "deleteContentBackward" || inputType === "deleteContentForward" || inputType === "deleteByCut" ) {
+			if (inputType === "deleteContentBackward"
+				|| inputType === "deleteContentForward"
+				|| inputType === "deleteByCut") {
 				if (editor.childNodes.length === 1 && editor.textContent?.length === 0 ) {
 					while (editor.firstChild) {
 						editor.removeChild(editor.firstChild);
@@ -181,7 +151,7 @@ const Highlight = forwardRef<HighlightHandle, ITweetTextareaProps>((
 			} else {
 				textArea = insertText
 			}
-			textArea?.process(range,repeat,repeatCount)
+			textArea?.process(range, repeat, repeatCount)
 			editor.normalize();
 			const currentText = Array.from(editor.childNodes)
 				.map((p) => p.textContent)
@@ -189,7 +159,6 @@ const Highlight = forwardRef<HighlightHandle, ITweetTextareaProps>((
 			setText(currentText);
 			customEvents.dispatchTextUpdateEvent(editor, { currentText });
 		};
-
 		const cursorEventDispatch = () => {
 			const selection = document.getSelection()
 			if (selection && selection.rangeCount) {
diff --git a/src/TweetTextarea.tsx b/src/TweetTextarea.tsx
index 32d7895..658f713 100644
--- a/src/TweetTextarea.tsx
+++ b/src/TweetTextarea.tsx
@@ -1,16 +1,53 @@
-import React, { useRef, useState } from 'react'
+import React, { useEffect, useRef, useState } from 'react'
 import Highlight, { HighlightHandle } from './Highlight';
 import Suggestions from './Suggestions';
-import { ChangeTextArgs } from './ts/types';
-
+import { ChangeTextArgs, ProcessType } from './ts/types';
+import patterns from "./ts/patterns.ts";
+import {
+	InsertLineBreak,
+	InsertParagraph,
+	InsertText, 
+	FormatText} from './ts/ProcessKeyboard.ts'
+import ProcessPaste from "./ts/ProcessPaste.ts";
 type HighlightProps = {
 	className:string
+	highlightClassName:string
 }
 
-const TweetTextarea:React.FC<HighlightProps> =  ({className}:HighlightProps) => {
+const TweetTextarea:React.FC<HighlightProps> =  ({
+	className,
+	highlightClassName = ''}:HighlightProps) => {
 	const [changeTextArgs, setChangeTextArgs ] = useState<ChangeTextArgs | null>(null)
 	const highlightRef = useRef<HighlightHandle>({insertSuggestionAtCaret: (suggestion:string) => null})
- 	const onChangeText = (event:ChangeTextArgs) => {
+	const STORAGE_KEY = "highlightPattern";
+	let [process, setProcess] = useState<ProcessType | null>(null)
+	const [pattern, setPattern ] = useState<RegExp | null>(null) ;
+	useEffect(() => {
+		const storedPattern = window.localStorage.getItem(STORAGE_KEY);
+		if (storedPattern && storedPattern.trim() !== "") {
+			setPattern(patterns.patternFromString(storedPattern))
+		} else {
+			patterns
+				.initPattern()
+				.then((highlightPattern) => {
+					window.localStorage.setItem(STORAGE_KEY, highlightPattern.source);
+					setPattern(highlightPattern)
+				})
+				.catch((err) => console.error(err));
+		}
+	},[])
+	useEffect(() => {
+		if(!pattern) return
+		setProcess({
+			insertLineBreak: new InsertLineBreak(pattern, highlightClassName),
+			insertParagraph: new InsertParagraph(pattern, highlightClassName),
+			insertText: new InsertText(pattern, highlightClassName),
+			processPaste: new ProcessPaste(pattern, highlightClassName),
+			formatText: new FormatText(pattern, highlightClassName)
+		})
+	}, [pattern]);
+	
+	const onChangeText = (event:ChangeTextArgs) => {
 		if(!event) return
 		setChangeTextArgs(event)
 	}
@@ -18,7 +55,11 @@ const TweetTextarea:React.FC<HighlightProps> =  ({className}:HighlightProps) =>
 		highlightRef.current?.insertSuggestionAtCaret(suggestion)
 	}
 	return (<>
-				<Highlight className={className} onChangeText={onChangeText} ref={highlightRef}/>
+				<Highlight className={className}
+					onChangeText={onChangeText}
+					process={process}
+					ref={highlightRef}
+				/>
 				<Suggestions changeTextArgs={changeTextArgs} onInsertSuggestion={onInsertSuggestion}/>
 			</>
 	)
diff --git a/src/ts/types.ts b/src/ts/types.ts
index 4e8741d..5372b30 100644
--- a/src/ts/types.ts
+++ b/src/ts/types.ts
@@ -19,6 +19,9 @@
  * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
+import { FormatText, InsertLineBreak, InsertParagraph, InsertText } from "./ProcessKeyboard";
+import ProcessPaste from "./ProcessPaste";
+
 export interface INodeAndOffset {
     node: Element;
     offset: number;
@@ -60,6 +63,14 @@ export type ChangeTextArgs = {
     caretCoordinates: {top:number, left: number}
 }
 
+export type ProcessType = {
+	insertLineBreak:InsertLineBreak
+	insertParagraph:InsertParagraph
+	insertText:InsertText
+	processPaste:ProcessPaste
+	formatText:FormatText
+}
+
 export interface ITweetTextareaProps
     extends Omit<
         React.HTMLAttributes<HTMLDivElement>,
@@ -69,6 +80,7 @@ export interface ITweetTextareaProps
     placeholder?: string;
     value?: string;
     cursorPosition?: ICurorChangeDetail;
+    process:ProcessType | null;
     onChangeText: (event:ChangeTextArgs) => void;
     onTextUpdate?: (event: CustomEvent<ITextUpdateDetail>) => void;
     onCursorChange?: (event: CustomEvent<ICurorChangeDetail>) => void;
